abstract

Digital hardware uses either fixed- or floating-point for numeric representation. Since the general computer CPU uses floating-point representation, software-based simulation tools which are used for modeling and simulation of arithmetic operations and signal processing algorithms use floating-point representation as well. However synthesizing customized hardware for fixed-point arithmetic operations for FPGAs or ASICs is more efficient compared to their floating-point counterparts. This necessitates an step to convert the representation of a floating-point simulated algorithm on MATLAB for example, to a fixed-point representation which is suitable for hardware implementation. While this conversion step has always been done on software level, like on MATLAB itself, here a new approach has been introduced to show the possibility of accelerating this step by using hardware reconfigurable designs.  

introduction

In general, development of a signal processing algorithm starts with the functional description. for example how a forward error correction code, encodes the data at the transmitter side, and how it decodes the coded data to reproduce the original data at the receiver side, can be described mathematically. 
Based on this description the designer can develop the algorithm and write a software code for example in MATLAB to test and simulate the design. For the mentioned FEC code example, this will be producing different data packages, encoding them, adding appropriate noise values to the coded data to simulate the effect of channel, decoding the noisy data and comparing the final results with the original data inorder to measure the effectiveness of the FEC code.
The implementation of floating point arithmetic functions on hardware is more complicated and resource consuming compared to their fixed-point counterparts. When the algorithm needs to be implemented on hardware platforms like FPGAs, SoCs, ASICs and etc. the numeric representation of all the variables should be converted from floating- to fixed-point. Floating-point and fixed-point representations are throughly explained on [section 2]. 
For a developer who is using MATLAB for developing and simulating an algorithm, there are certain toolboxes available for generating the fixed-point version of the code and running the simulation to measure the effect of reducing the bit-widths of each variable on the accuracy of the overal output of the algorithm. For a serious project with a lot of different input conditions, running the fixed-point simulation in cases can take several weeks even months to complete. In many cases the variety of possibilties for inputs and different widths for the variables are so vast that the designers are forced to settle for a suboptimal solution of the floating- to fixed-point conversion solution. 
This article is milestone for an approach to accelerate the fixed-point simulation of a general signal processing algorithm, using an FPGA-based width re-configurable hardware implementation of the algorithm. The rest of this paper is organized as followed. [Section 2] describes the floating- and fixed-point numeric representations and their characteristics, and a common approach for converting a normal floating-point code in MATLAB to a fixed-point code. [Section 3] describes our approach to accelerate the fixed-point simulation on hardware and in [section 4] an example FIR filter has been tested using this approach and the results are shown as a proof of concept. [section 5] is dedicated to describing the way forward and what will be the goal for the project to lead to.



